// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

define(["pi/Pi"], function(aPi) {
  var Nsend;
  return Nsend = (function(superClass) {
    extend(Nsend, superClass);

    function Nsend() {
      return Nsend.__super__.constructor.apply(this, arguments);
    }

    Nsend.prototype.attr = function() {
      return Nsend.__super__.attr.apply(this, arguments).concat(['bullet']);
    };

    Nsend.prototype.init = function() {
      if (!this.a.bullet) {
        return this.a.bullet = "#bullet";
      }
    };

    Nsend.prototype.nsend = function(msg, callback) {
      return this.rpc(this.a.bullet + "@self", [], (function(_this) {
        return function(b) {
          return b.nsend(msg, callback);
        };
      })(this));
    };

    Nsend.prototype.ncall = function(callback) {
      return this.rpc(this.a.bullet + "@self", [], function(b) {
        return callback(b);
      });
    };

    Nsend.prototype.send = function() {
      var msg;
      msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rpc(this.a.bullet + "@self", [], (function(_this) {
        return function(b) {
          return b.send.apply(b, msg);
        };
      })(this));
    };

    Nsend.prototype.bsub = function(ev, callback) {
      return this.sub(this.a.bullet + "@" + ev, callback);
    };

    Nsend.prototype.brpc = function(method, args, callback) {
      return this.rpc(this.a.bullet + "@" + method, args, callback);
    };

    Nsend.prototype.error = function() {
      var m;
      m = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rt.append("dialog/error", {
        text: m.join(" ")
      });
    };

    Nsend.prototype.info = function() {
      var m;
      m = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return rt.append("dialog/info", {
        text: m.join(" ")
      });
    };

    return Nsend;

  })(aPi);
});
